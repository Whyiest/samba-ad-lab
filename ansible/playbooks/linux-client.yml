---
- name: Joindre un client Linux au domaine Samba AD avec Winbind
  hosts: linuxclient
  become: true

  vars:
    domain_name: "example.local"
    domain_realm: "EXAMPLE.LOCAL"
    netbios_name: "EXAMPLE"
    ad_dc_ip: "192.168.56.10"
    ad_dc_hostname: "dc1.example.local"
    domain_admin_user: "Administrator"
    domain_admin_password: "Esteban1#"
    interface_name: "eth1"

  tasks:
    - name: Débloquer resolv.conf en retirant l'attribut immuable si présent
      command: chattr -i /etc/resolv.conf
      ignore_errors: yes

    - name: Définir resolv.conf vers le DC Samba
      copy:
        dest: /etc/resolv.conf
        content: |
          search {{ domain_name }}
          nameserver {{ ad_dc_ip }}
        force: yes

    - name: Préconfigurer les réponses debconf pour krb5-user
      debconf:
        name: krb5-config
        question: "{{ item.question }}"
        value: "{{ item.value }}"
        vtype: "{{ item.vtype }}"
      loop:
        - { question: "krb5-config/default_realm", value: "{{ domain_realm }}", vtype: "string" }
        - { question: "krb5-config/kerberos_servers", value: "{{ ad_dc_hostname }}", vtype: "string" }
        - { question: "krb5-config/admin_server", value: "{{ ad_dc_hostname }}", vtype: "string" }

    - name: Installer les paquets requis sans interaction
      command: >
        apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
        samba krb5-user winbind libnss-winbind libpam-winbind libpam-krb5 chrony
      args:
        warn: false

    - name: Définir le fichier /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ ad_dc_ip }} {{ ad_dc_hostname }} dc1"
        state: present

    - name: Créer le fichier /etc/krb5.conf
      copy:
        dest: /etc/krb5.conf
        content: |
          [libdefaults]
              default_realm = {{ domain_realm }}
              dns_lookup_realm = true
              dns_lookup_kdc = true

          [realms]
              {{ domain_realm }} = {
                  kdc = {{ ad_dc_hostname }}
                  admin_server = {{ ad_dc_hostname }}
              }

          [domain_realm]
              .{{ domain_name }} = {{ domain_realm }}
              {{ domain_name }} = {{ domain_realm }}

    - name: Créer le fichier /etc/samba/smb.conf
      copy:
        dest: /etc/samba/smb.conf
        content: |
          [global]
              netbios name = LINUXCLIENT
              workgroup = {{ netbios_name }}
              security = ADS
              realm = {{ domain_realm }}
              winbind use default domain = yes
              winbind enum users = yes
              winbind enum groups = yes
              winbind refresh tickets = yes
              template shell = /bin/bash
              template homedir = /home/%U
              idmap config * : backend = tdb
              idmap config * : range = 3000-7999
              idmap config {{ netbios_name }} : backend = rid
              idmap config {{ netbios_name }} : range = 10000-999999

    - name: Mettre à jour nsswitch.conf pour Winbind
      lineinfile:
        path: /etc/nsswitch.conf
        regexp: '^passwd:'
        line: 'passwd:         compat winbind'

    - name: Ajouter winbind aux groupes système dans nsswitch.conf
      lineinfile:
        path: /etc/nsswitch.conf
        regexp: '^group:'
        line: 'group:          compat winbind'

    - name: Vérifier la connectivité Kerberos avec kinit
      shell: echo '{{ domain_admin_password }}' | kinit {{ domain_admin_user }}
      register: kinit_result
      failed_when: kinit_result.rc != 0
      ignore_errors: no

    - name: Joindre le domaine avec net ads join
      shell: echo '{{ domain_admin_password }}' | net ads join -U {{ domain_admin_user }}%{{ domain_admin_password }}
      args:
        creates: /etc/samba/joined
      register: join_result
      failed_when: "'Failed to join domain' in join_result.stdout or join_result.rc != 0"

    - name: Créer un fichier témoin pour éviter les doubles joins
      file:
        path: /etc/samba/joined
        state: touch

    - name: Redémarrer les services nécessaires
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - smbd
        - winbind
        - nmbd

    - name: Vérifier l'intégration - wbinfo -u
      command: wbinfo -u
      register: wbinfo_users
      changed_when: false

    - name: Afficher les utilisateurs du domaine
      debug:
        var: wbinfo_users.stdout_lines
